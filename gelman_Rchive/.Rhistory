n <- 1e4
r <- .1
x1 <- rnorm (n)
y1 <- rnorm (n, r*x1, sqrt(1-r^2))
x2 <- rnorm (n)
y2 <- rnorm (n, r*x2, sqrt(1-r^2))
print (mean (sign((x1-x2)*(y1-y2))))
n <- 1e4
r <- .1
x1 <- rnorm (n)
y1 <- rnorm (n, r*x1, sqrt(1-r^2))
x2 <- rnorm (n)
y2 <- rnorm (n, r*x2, sqrt(1-r^2))
print (mean (sign((x1-x2)*(y1-y2))))
n <- 1e4
r <- .1
x1 <- rnorm (n)
y1 <- rnorm (n, r*x1, sqrt(1-r^2))
x2 <- rnorm (n)
y2 <- rnorm (n, r*x2, sqrt(1-r^2))
print (mean (sign((x1-x2)*(y1-y2))))
n <- 1e4
r <- .1
x1 <- rnorm (n)
y1 <- rnorm (n, r*x1, sqrt(1-r^2))
x2 <- rnorm (n)
y2 <- rnorm (n, r*x2, sqrt(1-r^2))
print (mean (sign((x1-x2)*(y1-y2))))
n <- 1e5
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
exp(7)
log(7500/1.5)
7500/1.5
25*500
500279/11634412
372301/11634412
0.887 * 11634412
0.043 * 11634412
options(digits=10)
0.887 * 11634412
0.043 * 11634412
0.032 * 11634412
0.038*15845575
442108/11634412
0.038 * 11634412
974/2
exp(.3)
(1-2*pi)^2
Sys.setenv(MAKEFLAGS = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan() # possibly with multiarch = TRUE, see below
Sys.setenv(MAKEFLAGS = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan() # possibly with multiarch = TRUE, see below
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4)
print(fit)
fit
fit1 <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
install.packages(c("MASS", "Matrix"))
setwd("~/AndrewFiles/research/stan/worldcup")
source('~/.active-rstudio-document')
fit_discrete <- stan_run ("worldcup_discrete.stan", data=data, chains=4, iter=2000, seed=seed)
fit_discrete <- stan_run ("worldcup_discrete.stan", data=data, chains=4, iter=2000, seed=seed)
fit_discrete <- stan_run ("worldcup_discrete.stan", data=data, chains=4, iter=2000, seed=seed)
data <- c("nteams","ngames","team1","score1","team2","score2","prior_score","maxrange","nrange")
fit_discrete <- stan_run ("worldcup_discrete.stan", data=data, chains=4, iter=2000, seed=seed)
print(fit_discrete)
?stan
maxrange <- 6
nrange <- 2*maxrange + 1
data <- c("nteams","ngames","team1","score1","team2","score2","prior_score","maxrange","nrange")
inits <- list (b=mean(sims$b), sigma_a=mean(sims$sigma_a), sigma_y=mean(sims$sigma_y), eta_a=colMeans(sims$eta_a), df=mean(sims$df))
mean(sims$b)
sims$b
sims <- extract(fit_matt)
mean(sims$b)
maxrange <- 6
nrange <- 2*maxrange + 1
data <- c("nteams","ngames","team1","score1","team2","score2","prior_score","maxrange","nrange")
inits <- list (b=mean(sims$b), sigma_a=mean(sims$sigma_a), sigma_y=mean(sims$sigma_y), eta_a=colMeans(sims$eta_a), df=mean(sims$df))
fit_discrete <- stan_run ("worldcup_discrete.stan", data=data, inits=inits, chains=4, iter=2000, seed=seed)
fit_discrete <- stan_run ("worldcup_discrete.stan", data=data, inits=inits, chains=4, iter=200, seed=seed)
print(fit_discrete)
library ("rstan")
## Sebastian's function to run stan with caching of compiled Stan models
stan_run <- function(stanModel, ...) {
if(class(stanModel) == "stanfit") {
stanExe <- stanModel
} else {
stanModel.rda <- gsub("stan$", "rda", stanModel)
if(!file.exists(stanModel.rda) || file.info(stanModel.rda)$mtime < file.info(stanModel)$mtime) {
cat("Model",stanModel,"needs recompilation.\n")
args <- modifyList(list(...), list(file=stanModel, iter=0, warmup=0, chains=0))
stanExe <- do.call(stan, args)
saveRDS(stanExe, file=stanModel.rda)
} else {
cat("Loading cached stan model", stanModel, ".\n")
stanExe = readRDS(stanModel.rda)
}
}
stan(fit=stanExe, ...)
}
teams <- as.vector (unlist (read.table ("soccerpowerindex.txt", header=FALSE)))
nteams <- length(teams)
prior_score <- rev(1:nteams)
prior_score <- (prior_score - mean(prior_score))/(2*sd(prior_score))
data2012 <- read.table ("worldcup2012.txt", header=FALSE)
ngames <- nrow (data2012)
team1 <- match (as.vector(data2012[[1]]), teams)
score1 <- as.vector(data2012[[2]])
team2 <- match (as.vector(data2012[[3]]), teams)
score2 <- as.vector(data2012[[4]])
df <- 7
data <- c("nteams","ngames","team1","score1","team2","score2","prior_score","df")
seed <- sample.int(.Machine$integer.max, 1)
print (seed)
fit <- stan_run("worldcup.stan", data=data, chains=4, iter=2000, seed=seed)
print(fit)
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=100, seed=seed)
print(fit)
?write
stan_run <- function(stanModel, ...) {
if(class(stanModel) == "stanfit") {
stanExe <- stanModel
} else {
stanModel.rda <- gsub("stan$", "rda", stanModel)
if(!file.exists(stanModel.rda) || file.info(stanModel.rda)$mtime < file.info(stanModel)$mtime) {
cat("Model",stanModel,"needs recompilation.\n")
args <- modifyList(list(...), list(file=stanModel, iter=0, warmup=0, chains=0))
stanExe <- do.call(stan, args)
saveRDS(stanExe, file=stanModel.rda)
} else {
cat("Loading cached stan model", stanModel, ".\n")
stanExe = readRDS(stanModel.rda)
}
}
seed <- sample.int(.Machine$integer.max, 1)
write (seed, file="stan_seed.txt")
stan(fit=stanExe, seed=seed...)
}
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=100)
print(fit)
stan_run <- function(stanModel, ...) {
if(class(stanModel) == "stanfit") {
stanExe <- stanModel
} else {
stanModel.rda <- gsub("stan$", "rda", stanModel)
if(!file.exists(stanModel.rda) || file.info(stanModel.rda)$mtime < file.info(stanModel)$mtime) {
cat("Model",stanModel,"needs recompilation.\n")
args <- modifyList(list(...), list(file=stanModel, iter=0, warmup=0, chains=0))
stanExe <- do.call(stan, args)
saveRDS(stanExe, file=stanModel.rda)
} else {
cat("Loading cached stan model", stanModel, ".\n")
stanExe = readRDS(stanModel.rda)
}
}
seed <- sample.int(.Machine$integer.max, 1)
write (seed, file="stan_seed.txt")
stan(fit=stanExe, seed=seed, ...)
}
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=100)
print(fit)
simss <- extract (fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
library ("arm")
png ("worldcup1.png", height=500, width=500)
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
dev.off()
sims <- extract(fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
library ("arm")
png ("worldcup1.png", height=500, width=500)
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
dev.off()
fit_noprior <- stan_run("worldcup_noprior_matt.stan", data=data, chains=4, iter=100)
print(fit_noprior)
fit_noprior <- stan_run("worldcup_noprior_matt.stan", data=data, chains=4, iter=100)
print(fit_noprior)
fit_noprior <- stan_run("worldcup_noprior_matt.stan", data=data, chains=4, iter=1000)
print(fit_noprior)
worldcup_plot <- function (fit, file.png){
sims <- extract(fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
library ("arm")
png (file.png, height=500, width=500)
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
dev.off()
}
worldcup_plot(fit_noprior, "worldcup1_noprior.png")
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=100)
print(fit)
sims <- extract(fit)
expected_on_sqrt_scale <- a_hat[team1] - a_hat[team2]
sigma_y_sims <- sims$sigma_y
df_sims <- sims$df
interval_975 <- median(qt(.975,df_sims)*sigma_y_sims)
signed_square <- function (a) {sign(a)*a^2}
lower <- signed_square(expected_on_sqrt_scale - interval_975)
upper <- signed_square(expected_on_sqrt_scale + interval_975)
png ("worldcup2.png", height=1000, width=500)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(lower), upper.conf.bounds=rev(upper),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
expected_on_sqrt_scale <- a_hat[team1] - a_hat[team2]
sigma_y_sims <- sims$sigma_y
interval_975 <- median(qt(.975,df)*sigma_y_sims)
signed_square <- function (a) {sign(a)*a^2}
lower <- signed_square(expected_on_sqrt_scale - interval_975)
upper <- signed_square(expected_on_sqrt_scale + interval_975)
png ("worldcup2.png", height=1000, width=500)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(lower), upper.conf.bounds=rev(upper),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
sims <- extract(fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
library ("arm")
png ("worldcup1.png", height=500, width=500)
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
dev.off()
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
expected_on_sqrt_scale <- a_hat[team1] - a_hat[team2]
sigma_y_sims <- sims$sigma_y
interval_975 <- median(qt(.975,df)*sigma_y_sims)
signed_square <- function (a) {sign(a)*a^2}
lower <- signed_square(expected_on_sqrt_scale - interval_975)
upper <- signed_square(expected_on_sqrt_scale + interval_975)
png ("worldcup2.png", height=1000, width=500)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(lower), upper.conf.bounds=rev(upper),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=100)
print(fit)
sims <- extract(fit)
sims <- extract (fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
expected_on_sqrt_scale <- a_hat[team1] - a_hat[team2]
sigma_y_sims <- sims$sigma_y
interval_975 <- median(qt(.975,df)*sigma_y_sims)
signed_square <- function (a) {sign(a)*a^2}
lower <- signed_square(expected_on_sqrt_scale - interval_975)
upper <- signed_square(expected_on_sqrt_scale + interval_975)
png ("worldcup2.png", height=1000, width=500)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(lower), upper.conf.bounds=rev(upper),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
?rt
quantile
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=5000)
print(fit)
sims <- extract (fit)
sims <- extract (fit)
a_sims <- sims$a
sigma_y_sims <- sims$sigma_y
nsims <- length(sigms$sigma_y)
random_outcome <- array(NA, c(nsims,ngames))
sims <- extract (fit)
a_sims <- sims$a
sigma_y_sims <- sims$sigma_y
nsims <- length(sigma_y_sims)
random_outcome <- array(NA, c(nsims,ngames))
for (s in 1:nsims){
random_outcome_on_sqrt_scale <- (a_sims[s,team1] - a_sims[s,team2]) + rt(ngames,df)*sigma_y_sims[s]
random_outome[s,] <- signed.square(random_outcome_on_sqrt_scale)
}
for (s in 1:nsims){
random_outcome_on_sqrt_scale <- (a_sims[s,team1] - a_sims[s,team2]) + rt(ngames,df)*sigma_y_sims[s]
random_outome[s,] <- signed_square(random_outcome_on_sqrt_scale)
}
random_outcome <- array(NA, c(nsims,ngames))
sims <- extract (fit)
a_sims <- sims$a
sigma_y_sims <- sims$sigma_y
nsims <- length(sigma_y_sims)
random_outcome <- array(NA, c(nsims,ngames))
for (s in 1:nsims){
random_outcome_on_sqrt_scale <- (a_sims[s,team1] - a_sims[s,team2]) + rt(ngames,df)*sigma_y_sims[s]
random_outome[s,] <- signed_square(random_outcome_on_sqrt_scale)
}
for (s in 1:nsims){
random_outcome_on_sqrt_scale <- (a_sims[s,team1] - a_sims[s,team2]) + rt(ngames,df)*sigma_y_sims[s]
random_outcome[s,] <- signed_square(random_outcome_on_sqrt_scale)
}
sim_quantiles <- array(NA,c(ngames,2))
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(random_outcome[,i], c(.025,.975))
}
png ("worldcup3.png", height=1000, width=500)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(sim_quantiles[,1]), upper.conf.bounds=rev(sim_quantiles[,2]),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(round(random_outcome[,i]), c(.025,.975))
}
png ("worldcup4.png", height=1000, width=500)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(sim_quantiles[,1]), upper.conf.bounds=rev(sim_quantiles[,2]),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
a_hat <- colMeans(a_sims)
new_order <- order(a_hat[team1] - a_hat[team2])
png ("worldcup5.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order], sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1], upper.conf.bounds=sim_quantiles[new_order,2],
varnames=paste(teams[team1[new_order]], "vs.", teams[team2[new_order]])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
png ("worldcup5.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order], sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1], upper.conf.bounds=sim_quantiles[new_order,2],
varnames=paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
a_hat <- colMeans(a_sims)
new_order <- order(a_hat[team1] - a_hat[team2])
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(random_outcome[,i]), c(.025,.975)
}
png ("worldcup5.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order], sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1], upper.conf.bounds=sim_quantiles[new_order,2],
varnames=paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(random_outcome[,i]), c(.025,.975))
}
png ("worldcup5.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order], sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1], upper.conf.bounds=sim_quantiles[new_order,2],
varnames=paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(random_outcome[,i], c(.025,.975))
}
png ("worldcup5.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order], sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1], upper.conf.bounds=sim_quantiles[new_order,2],
varnames=paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
new_order <- order(prior_score[team1] - prior_score[team2])
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(random_outcome[,i], c(.025,.975))
}
png ("worldcup5.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order], sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1], upper.conf.bounds=sim_quantiles[new_order,2],
varnames=paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
flip <- if (prior_score[team1] < prior_score[team2], -1, 1)
png ("worldcup6.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order]*flip, sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1]*flip, upper.conf.bounds=sim_quantiles[new_order,2]*flip,
varnames=ifelse(flip==1, paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
paste(teams[team2[new_order]], "vs.", teams[team1[new_order]])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
flip <- ifelse (prior_score[team1] < prior_score[team2], -1, 1)
png ("worldcup6.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order]*flip, sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1]*flip, upper.conf.bounds=sim_quantiles[new_order,2]*flip,
varnames=ifelse(flip==1, paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
paste(teams[team2[new_order]], "vs.", teams[team1[new_order]])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
flip <- ifelse (prior_score[team1] < prior_score[team2], -1, 1)
flip <- flip[new_order]
png ("worldcup6.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order]*flip, sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1]*flip, upper.conf.bounds=sim_quantiles[new_order,2]*flip,
varnames=ifelse(flip==1, paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
paste(teams[team2[new_order]], "vs.", teams[team1[new_order]])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
flip <- ifelse (prior_score[team1] < prior_score[team2], -1, 1)
new_order <- order((prior_score[team1] - prior_score[team2])*flip)
flip <- flip[new_order]
png ("worldcup6.png", height=1000, width=500)
coefplot ((score1 - score2)[new_order]*flip, sds=rep(0, ngames),
lower.conf.bounds=sim_quantiles[new_order,1]*flip, upper.conf.bounds=sim_quantiles[new_order,2]*flip,
varnames=ifelse(flip==1, paste(teams[team1[new_order]], "vs.", teams[team2[new_order]]),
paste(teams[team2[new_order]], "vs.", teams[team1[new_order]])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
dev.off ()
